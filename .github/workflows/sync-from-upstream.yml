name: Sync from Upstream

# This workflow synchronizes a fork with its upstream repository:
# 1. Syncs the main branch to match upstream using GitHub API
# 2. Syncs all tags to match upstream using GitHub API
# 3. Mirrors all releases from upstream to the fork
#
# The workflow runs hourly by default and can also be triggered manually.

on:
  schedule:
    - cron: "0 * * * *" # every hour
  workflow_dispatch:

permissions:
  contents: write # Needed for branch/tag updates and releases

jobs:
  sync-upstream:
    name: Synchronize with Upstream Repository
    runs-on: ubuntu-latest
    if: github.repository == 'hafslundecovannkraft/stratus-actions' # Only run on the forked repository
    env:
      FORK_REPO: hafslundecovannkraft/stratus-actions # This repository
      UPSTREAM_REPO: stratus-test/stratus-actions # The upstream repository to sync from
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync branch from upstream using GitHub API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');

            console.log(`Syncing from upstream: ${upstream} to ${context.repo.owner}/${context.repo.repo}`);

            // Get the latest commit SHA from upstream main branch
            const { data: upstreamBranch } = await github.rest.repos.getBranch({
              owner: upstreamOwner,
              repo: upstreamRepo,
              branch: 'main'
            });

            const upstreamSha = upstreamBranch.commit.sha;
            console.log(`Latest upstream commit SHA: ${upstreamSha}`);

            try {
              // Get current reference to update
              const { data: reference } = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main'
              });

              if (reference.object.sha === upstreamSha) {
                console.log('Already up to date with upstream.');
                return;
              }

              // Update reference to match upstream
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main',
                sha: upstreamSha,
                force: true
              });

              console.log(`Successfully updated main branch to match upstream commit ${upstreamSha}`);
            } catch (error) {
              console.error('Error syncing branch:', error);
              throw error;
            }

      - name: Force Sync tags from upstream using GitHub API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');

            console.log(`Syncing tags from upstream: ${upstream}`);

            // Get all tags from upstream
            const { data: upstreamTags } = await github.rest.repos.listTags({
              owner: upstreamOwner,
              repo: upstreamRepo,
              per_page: 100
            });

            // Get all tags in the current repo
            const { data: forkTags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // Convert fork tags to a map of name -> commit SHA for easy lookup
            const existingTagMap = new Map();
            forkTags.forEach(tag => {
              existingTagMap.set(tag.name, tag.commit.sha);
            });

            // Create or update tags in the fork
            for (const tag of upstreamTags) {
              if (!existingTagMap.has(tag.name)) {
                console.log(`Creating tag ${tag.name} with commit ${tag.commit.sha}`);
                try {
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/tags/${tag.name}`,
                    sha: tag.commit.sha
                  });
                  console.log(`Successfully created tag: ${tag.name}`);
                } catch (error) {
                  console.error(`Error creating tag ${tag.name}:`, error);
                  // Continue with other tags even if one fails
                }
              } else if (existingTagMap.get(tag.name) !== tag.commit.sha) {
                console.log(`Updating tag ${tag.name} to match upstream (force sync)`);
                try {
                  // Delete existing tag first
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tag.name}`
                  });

                  // Create new tag at the correct commit
                  await github.rest.git.createRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `refs/tags/${tag.name}`,
                    sha: tag.commit.sha
                  });
                  console.log(`Successfully force updated tag: ${tag.name} to commit ${tag.commit.sha}`);
                } catch (error) {
                  console.error(`Error updating tag ${tag.name}:`, error);
                  // Continue with other tags even if one fails
                }
              }
            }

      - name: Mirror releases from upstream
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');

            console.log(`Mirroring releases from upstream: ${upstream}`);

            try {
              // Get all releases from upstream
              const { data: upstreamReleases } = await github.rest.repos.listReleases({
                owner: upstreamOwner,
                repo: upstreamRepo,
                per_page: 100
              });

              console.log(`Found ${upstreamReleases.length} releases in upstream repository`);

              // Get all releases in the current repo
              const { data: forkReleases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              console.log(`Found ${forkReleases.length} releases in fork repository`);
              const forkTags = new Set(forkReleases.map(r => r.tag_name));

              // Mirror releases that don't exist in the fork
              let mirrored = 0;
              for (const release of upstreamReleases) {
                if (!forkTags.has(release.tag_name)) {
                  console.log(`Mirroring release: ${release.tag_name} - ${release.name}`);
                  try {
                    await github.rest.repos.createRelease({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      tag_name: release.tag_name,
                      name: release.name,
                      body: `${release.body || ''}\n\n---\n*This release was automatically mirrored from the upstream repository.*`,
                      draft: release.draft,
                      prerelease: release.prerelease,
                      target_commitish: release.target_commitish || 'main'
                    });
                    mirrored++;
                    console.log(`Successfully mirrored release: ${release.tag_name}`);
                  } catch (error) {
                    console.error(`Error mirroring release ${release.tag_name}:`, error);
                    // Continue with other releases even if one fails
                  }
                }
              }

              console.log(`Sync complete. Mirrored ${mirrored} new releases.`);
            } catch (error) {
              console.error('Error in release mirroring process:', error);
              throw error;
            }

      - name: Sync Summary
        run: |
          echo "## Repository Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Branch Sync**: Main branch synchronized with upstream" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Tags Sync**: All tags synchronized with upstream" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Release Sync**: All releases mirrored from upstream" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”„ Synchronized with upstream: $UPSTREAM_REPO" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Last sync time: $(date)" >> $GITHUB_STEP_SUMMARY
