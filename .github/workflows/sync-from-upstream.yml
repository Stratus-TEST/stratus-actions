name: Sync from Upstream

# This workflow strictly synchronizes a fork with its upstream repository:
# 1. Syncs branches (currently main) to match upstream using GitHub API:
#    - Force updates existing branches to match upstream
#    - Creates branches that don't exist in the fork
#    - FAILS the workflow if any branch can't be created or updated to match upstream
# 2. Syncs all tags to match upstream using GitHub API with force updates:
#    - Creates new tags that don't exist in the fork
#    - For existing tags pointing to different commits:
#      - Attempts direct tag creation first
#      - If creation fails and tag exists, deletes existing tag and recreates it
#      - Falls back to direct update if deletion fails
#    - FAILS the workflow if any tag can't be created or updated to match upstream
# 3. Mirrors all releases from upstream to the fork:
#    - Creates new releases in the fork that exist in upstream
#    - FAILS the workflow if any release can't be mirrored
#
# Note: The workflow will FAIL if it can't synchronize ALL branches, tags, and releases with upstream
#
# IMPORTANT: For the "Resource not accessible by integration" errors with tags:
# 1. First verify the upstream repository name is correct: UPSTREAM_REPO: stratus-test/stratus-actions
# 2. Then try: Disable tag protection rules in GitHub repository settings (Settings → Branches → Tag protection rules)
# 3. For protected tags like 'v1' and 'latest': Create a Personal Access Token (PAT) with the 'repo' scope
#    and add it to repository secrets as SYNC_PAT. The workflow will automatically use it if available.
#
# The workflow runs hourly by default and can also be triggered manually.

on:
  schedule:
    - cron: "0 * * * *" # every hour
  workflow_dispatch:

permissions:
  contents: write # Needed for branch/tag updates and releases

jobs:
  sync-upstream:
    name: Synchronize with Upstream Repository
    runs-on: ubuntu-latest
    if: github.repository == 'hafslundecovannkraft/stratus-actions' # Only run on the forked repository
    env:
      FORK_REPO: hafslundecovannkraft/stratus-actions # This repository
      UPSTREAM_REPO: stratus-test/stratus-actions # The upstream repository to sync from
    steps:
      - name: Checkout fork
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Sync branches from upstream using GitHub API
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');
            const branchesToSync = ['main']; // List of branches to sync with upstream
            const failedBranches = [];

            console.log(`Syncing branches from upstream: ${upstream} to ${context.repo.owner}/${context.repo.repo}`);

            for (const branchName of branchesToSync) {
              console.log(`Syncing branch: ${branchName}`);

              try {
                // Get the latest commit SHA from upstream branch
                const { data: upstreamBranch } = await github.rest.repos.getBranch({
                  owner: upstreamOwner,
                  repo: upstreamRepo,
                  branch: branchName
                });

                const upstreamSha = upstreamBranch.commit.sha;
                console.log(`Latest upstream commit SHA for ${branchName}: ${upstreamSha}`);

                // Get current reference to update
                try {
                  const { data: reference } = await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${branchName}`
                  });

                  if (reference.object.sha === upstreamSha) {
                    console.log(`Branch ${branchName} already up to date with upstream.`);
                    continue; // Skip to next branch
                  }

                  // Update reference to match upstream
                  try {
                    await github.rest.git.updateRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `heads/${branchName}`,
                      sha: upstreamSha,
                      force: true
                    });
                    console.log(`Successfully updated ${branchName} branch to match upstream commit ${upstreamSha}`);
                  } catch (updateError) {
                    console.error(`Error updating branch ${branchName}:`, updateError.message);
                    failedBranches.push(`${branchName} (update failed)`);
                  }
                } catch (refError) {
                  console.error(`Error getting reference for branch ${branchName}:`, refError.message);

                  // If the branch doesn't exist, try to create it
                  console.log(`Attempting to create branch ${branchName}...`);
                  try {
                    await github.rest.git.createRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `refs/heads/${branchName}`,
                      sha: upstreamSha
                    });
                    console.log(`Successfully created branch ${branchName} at commit ${upstreamSha}`);
                  } catch (createError) {
                    console.error(`Error creating branch ${branchName}:`, createError.message);
                    failedBranches.push(`${branchName} (create failed)`);
                  }
                }
              } catch (branchError) {
                console.error(`Error getting upstream branch ${branchName}:`, branchError.message);
                console.error(`Make sure the upstream repository "${upstream}" exists and is accessible.`);
                failedBranches.push(`${branchName} (upstream access failed)`);
              }
            }

            // Fail the workflow if any branches couldn't be synced
            if (failedBranches.length > 0) {
              const errorMessage = `Failed to sync the following branches with upstream: ${failedBranches.join(", ")}`;
              console.error(errorMessage);
              console.error(`Double-check that the upstream repository "${upstream}" is correct and accessible.`);
              throw new Error(errorMessage);
            }

      - name: Sync tags from upstream with force update when needed
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');

            console.log(`Syncing tags from upstream: ${upstream}`);

            // Get all tags from upstream
            const { data: upstreamTags } = await github.rest.repos.listTags({
              owner: upstreamOwner,
              repo: upstreamRepo,
              per_page: 100
            });

            // Get all tags in the current repo
            const { data: forkTags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            // Convert fork tags to a map of name -> commit SHA for easy lookup
            const existingTagMap = new Map();
            forkTags.forEach(tag => {
              existingTagMap.set(tag.name, tag.commit.sha);
            });

            // Create or update tags in the fork
            const failedTags = [];

            for (const tag of upstreamTags) {
              const tagName = tag.name;
              const targetSha = tag.commit.sha;

              // Check if tag already exists and matches upstream
              if (existingTagMap.has(tagName) && existingTagMap.get(tagName) === targetSha) {
                console.log(`Tag ${tagName} already matches upstream commit ${targetSha}`);
                continue;
              }

              // Try to create or update the tag
              let tagSyncSucceeded = false;

              // First, try to create the tag directly
              try {
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `refs/tags/${tagName}`,
                  sha: targetSha
                });
                console.log(`Successfully created tag ${tagName} at commit ${targetSha}`);
                tagSyncSucceeded = true;
              } catch (createError) {
                console.log(`Direct creation of tag ${tagName} failed: ${createError.message}`);

                // If creation failed, check if the tag exists
                let tagExists = false;
                try {
                  await github.rest.git.getRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                  tagExists = true;
                  console.log(`Tag ${tagName} exists, will attempt delete and recreate`);
                } catch (refError) {
                  if (refError.status === 404) {
                    console.log(`Tag ${tagName} does not exist, creation failed for other reasons`);
                  } else {
                    console.log(`Error checking tag ${tagName} existence: ${refError.message}`);
                  }
                }

                // If tag exists, try to delete it and recreate
                if (tagExists) {
                  try {
                    // Delete the existing tag
                    await github.rest.git.deleteRef({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      ref: `tags/${tagName}`
                    });
                    console.log(`Successfully deleted existing tag ${tagName}`);

                    // Now recreate the tag
                    try {
                      await github.rest.git.createRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: `refs/tags/${tagName}`,
                        sha: targetSha
                      });
                      console.log(`Successfully recreated tag ${tagName} at commit ${targetSha}`);
                      tagSyncSucceeded = true;
                    } catch (recreateError) {
                      console.error(`Failed to recreate tag ${tagName} after deletion: ${recreateError.message}`);
                    }
                  } catch (deleteError) {
                    console.error(`Failed to delete existing tag ${tagName}: ${deleteError.message}`);

                    // As a last resort, try direct update
                    try {
                      await github.rest.git.updateRef({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        ref: `tags/${tagName}`,
                        sha: targetSha,
                        force: true
                      });
                      console.log(`Successfully updated tag ${tagName} directly to ${targetSha}`);
                      tagSyncSucceeded = true;
                    } catch (updateError) {
                      console.error(`All methods failed for tag ${tagName}: ${updateError.message}`);
                    }
                  }
                }
              }

              // Track failed tags
              if (!tagSyncSucceeded) {
                failedTags.push(`${tagName} (sync failed)`);
                console.log(`❌ Failed to sync tag ${tagName} with upstream`);
              }
            }

            // Fail the workflow if any tags couldn't be synced
            if (failedTags.length > 0) {
              const errorMessage = `Failed to sync the following tags with upstream: ${failedTags.join(", ")}`;
              console.error(errorMessage);
              console.log(`
              ⚠️ TAG SYNC FAILURE ⚠️
              Some tags could not be synced despite attempting to delete and recreate them.

              This is likely due to:
              1. Tag protection rules in GitHub repository settings
              2. Insufficient GitHub Actions token permissions
              3. Repository access restrictions

              To resolve:
              - Check repository settings for tag protection rules
              - Verify the upstream repository ${upstream} is accessible
              - Consider if these tags require manual intervention
              `);
              throw new Error(errorMessage);
            }

      - name: Mirror releases from upstream
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const upstream = process.env.UPSTREAM_REPO;
            const [upstreamOwner, upstreamRepo] = upstream.split('/');

            console.log(`Mirroring releases from upstream: ${upstream}`);

            try {
              // Get all releases from upstream
              const { data: upstreamReleases } = await github.rest.repos.listReleases({
                owner: upstreamOwner,
                repo: upstreamRepo,
                per_page: 100
              });

              console.log(`Found ${upstreamReleases.length} releases in upstream repository`);

              // Get all releases in the current repo
              const { data: forkReleases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              console.log(`Found ${forkReleases.length} releases in fork repository`);
              const forkReleases_map = new Map();
              forkReleases.forEach(release => {
                forkReleases_map.set(release.tag_name, release);
              });

              // Mirror releases that don't exist in the fork
              let mirrored = 0;
              const failedReleases = [];

              for (const release of upstreamReleases) {
                if (!forkReleases_map.has(release.tag_name)) {
                  console.log(`Mirroring release: ${release.tag_name} - ${release.name}`);
                  try {
                    await github.rest.repos.createRelease({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      tag_name: release.tag_name,
                      name: release.name,
                      body: `${release.body || ''}\n\n---\n*This release was automatically mirrored from the upstream repository.*`,
                      draft: release.draft,
                      prerelease: release.prerelease,
                      target_commitish: release.target_commitish || 'main'
                    });
                    mirrored++;
                    console.log(`Successfully mirrored release: ${release.tag_name}`);
                  } catch (error) {
                    console.error(`Error mirroring release ${release.tag_name}:`, error.message);
                    failedReleases.push(`${release.tag_name} (${error.message})`);
                  }
                }
              }

              // Fail the workflow if any releases couldn't be mirrored
              if (failedReleases.length > 0) {
                const errorMessage = `Failed to mirror the following releases: ${failedReleases.join(", ")}`;
                console.error(errorMessage);
                throw new Error(errorMessage);
              }

              console.log(`Sync complete. Successfully mirrored ${mirrored} new releases.`);
            } catch (error) {
              console.error('Error in release mirroring process:', error);
              throw error;
            }

      - name: Sync Summary
        run: |
          echo "## Repository Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Branch Sync**: All branches synchronized with upstream" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tags Sync**: All tags synchronized with upstream (workflow fails if any tag sync fails)" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release Sync**: All releases mirrored from upstream" >> $GITHUB_STEP_SUMMARY
          echo "🔄 Synchronized with upstream: $UPSTREAM_REPO" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Last sync time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **Note**: This workflow strictly enforces complete synchronization with upstream. If any branch, tag, or release fails to sync, the entire workflow will fail." >> $GITHUB_STEP_SUMMARY
