name: Test Actions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "hello-world/**"
      - "release/**"
      - "build-scope-analyzer/**"
      - ".github/workflows/test-actions.yml"

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  test-hello-world:
    name: Test Hello World Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Action
        uses: ./hello-world

  test-release:
    name: Test Release Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Create a test scenario by modifying the release action to avoid actual push
      - name: Mock Release Action for Testing
        run: |
          # Create a backup of the original action
          cp release/action.yml release/action.yml.bak

          # Modify the action to skip the actual git push
          sed -i "s/git push origin/echo \"MOCK: Would push tag\"/g" release/action.yml

      - name: Create Test Release
        id: release
        uses: ./release
        with:
          draft: true
          prerelease: true
          tag-prefix: test-

      - name: Capture Release Details
        id: release-details
        if: steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Use the release_url output from the previous step
            const releaseUrl = process.env.RELEASE_URL;
            // Extract the release ID from the URL (last segment)
            const match = releaseUrl && releaseUrl.match(/\/releases\/tag\/([^/]+)/);
            if (!match) throw new Error('Could not extract release tag from release_url');
            const tag = decodeURIComponent(match[1]);
            let release;
            for (let i = 0; i < 5; i++) {
              try {
                const { data } = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag
                });
                release = data;
                break;
              } catch (err) {
                if (err.status === 404 && i < 4) {
                  await new Promise(res => setTimeout(res, 3000)); // wait 3 seconds
                } else {
                  throw err;
                }
              }
            }
            if (!release) throw new Error('Release not found after retries');
            fs.writeFileSync('release-notes.md', release.body || '');
            const metadata = {
              name: release.name,
              tagName: release.tag_name,
              isDraft: release.draft,
              isPrerelease: release.prerelease,
              createdAt: release.created_at
            };
            fs.writeFileSync('release-metadata.json', JSON.stringify(metadata, null, 2));
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_URL: ${{ steps.release.outputs.release_url }}

      - name: Post Release Preview to PR
        if: github.event_name == 'pull_request' && steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the release notes and metadata
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            const metadata = JSON.parse(fs.readFileSync('release-metadata.json', 'utf8'));

            // Create a formatted comment
            const comment = `## üéØ Release Action Test Results

            ### Release Metadata
            - **Version**: ${metadata.tagName}
            - **Name**: ${metadata.name}
            - **Type**: ${metadata.isDraft ? 'üìù Draft' : 'üì¢ Published'} ${metadata.isPrerelease ? '(Pre-release)' : ''}
            - **Created**: ${new Date(metadata.createdAt).toLocaleString()}
            - **Bump Type**: ${{ steps.release.outputs.bump_type }}
            - **Previous Version**: ${{ steps.release.outputs.previous_version }}

            ### Release Notes Preview

            <details>
            <summary>Click to expand release notes</summary>

            ${releaseNotes}

            </details>

            ### Release URL
            üîó [View test release](${{ steps.release.outputs.release_url }})

            > **Note**: This test release will be automatically deleted after verification.`;

            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Verify Release
        run: |
          echo "‚úÖ Release created successfully"
          echo "Version: ${{ steps.release.outputs.new_version }}"
          echo "Previous: ${{ steps.release.outputs.previous_version }}"
          echo "Bump type: ${{ steps.release.outputs.bump_type }}"
          echo "URL: ${{ steps.release.outputs.release_url }}"

          if [[ -f release-notes.md ]]; then
            echo -e "\nüìù Release Notes:"
            cat release-notes.md
          fi

      - name: Delete Test Releases and Test Tags
        if: always()
        run: |
          # Delete all releases (draft or published) with tag starting with 'test-'
          for tag in $(gh release list --limit 1000 --json tagName | jq -r '.[].tagName' | grep '^test-'); do
            echo "Deleting release with tag: $tag"
            gh release delete "$tag" --yes || true
          done

          # Delete all test tags (test-v*, test-latest, etc)
          for tag in $(git tag -l 'test-*'); do
            echo "Deleting test tag: $tag"
            git push --delete origin "$tag" || true
          done

          # Restore the original action
          mv release/action.yml.bak release/action.yml || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build-scope-analyzer:
    name: Test Build Scope Analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Test Environment
        run: |
          # Create test files
          mkdir -p src/helloworld
          echo "FROM node:18" > src/helloworld/Dockerfile
          echo "WORKDIR /app" >> src/helloworld/Dockerfile
          echo "COPY . ." >> src/helloworld/Dockerfile
          echo "CMD [\"node\", \"index.js\"]" >> src/helloworld/Dockerfile

          echo "name: hello-world" > src/helloworld/app.yaml
          echo "version: 1.0.0" >> src/helloworld/app.yaml
          echo "description: Test application" >> src/helloworld/app.yaml

          # Create a test branch to compare against
          git checkout -b test-base
          git add .
          git commit -m "Initial test commit" || true

          # Make changes on a new branch
          git checkout -b test-changes
          echo "console.log('Hello World');" > src/helloworld/index.js
          mkdir -p src/another-app
          echo "FROM alpine:latest" > src/another-app/Dockerfile
          git add .

      - name: Build Docker image for Build Scope Analyzer
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA ./build-scope-analyzer

      - name: Push Docker image to GHCR
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA

      - name: Analyze Build Scope (with changes) using container
        id: scope
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --output-format json > matrix.json
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Verify Analysis Results
        run: |
          echo "Matrix: $(cat matrix.json)"
          cat matrix.json | jq .

          # Verify that the output contains comparison_ref and not ref
          if grep -q '"ref":' matrix.json; then
            echo "‚ùå ERROR: Output still contains 'ref' instead of 'comparison_ref'"
            exit 1
          fi

          if ! grep -q '"comparison_ref":' matrix.json; then
            echo "‚ùå ERROR: Output does not contain 'comparison_ref'"
            exit 1
          fi

          echo "‚úÖ Verification passed: Output uses 'comparison_ref' properly"

      - name: Test with Include Pattern using container
        id: scope-include
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --include-pattern 'src/helloworld' --output-format json > matrix-include.json
          echo "matrix=$(cat matrix-include.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Verify Include Pattern Results
        run: |
          echo "Matrix (include pattern): $(cat matrix-include.json)"
          cat matrix-include.json | jq .

          # Verify that the output contains comparison_ref and not ref
          if grep -q '"ref":' matrix-include.json; then
            echo "‚ùå ERROR: Output still contains 'ref' instead of 'comparison_ref'"
            exit 1
          fi

          if ! grep -q '"comparison_ref":' matrix-include.json; then
            echo "‚ùå ERROR: Output does not contain 'comparison_ref'"
            exit 1
          fi

          # Verify that the include pattern worked correctly
          if ! jq -e '.apps.all | length > 0' matrix-include.json > /dev/null; then
            echo "‚ùå ERROR: Include pattern didn't populate apps.all properly"
            exit 1
          fi

          echo "‚úÖ Verification passed: Output uses 'comparison_ref' and include pattern works properly"

      - name: Cleanup Test Resources
        if: always()
        run: |
          echo "üßπ Cleaning up test resources..."

          # Clean up test branches
          git checkout main || git checkout master || true
          git branch -D test-base test-changes || true

          # Remove test Docker images
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker rmi ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA || true

          # Clean up test files
          rm -rf src/helloworld src/another-app matrix.json matrix-include.json || true

          echo "‚úÖ Cleanup completed"

  test-hello-world-docker:
    name: Test Hello World Docker Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Docker Action
        id: hello-docker
        uses: ./hello-world-docker
        with:
          who-to-greet: "Stratus Docker"

      - name: Print Docker Action Output
        run: |
          echo "Docker action time output: ${{ steps.hello-docker.outputs.time }}"
