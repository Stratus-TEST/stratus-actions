name: Test Actions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "hello-world/**"
      - "release/**"
      - "build-scope-analyzer/**"
      - ".github/workflows/test-actions.yml"

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  test-hello-world:
    name: Test Hello World Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Action
        uses: ./hello-world

  test-release:
    name: Test Release Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Create a test scenario by modifying the release action to avoid actual push
      - name: Mock Release Action for Testing
        run: |
          # Create a backup of the original action
          cp release/action.yml release/action.yml.bak

          # Modify the action to skip the actual git push
          sed -i "s/git push origin/echo \"MOCK: Would push tag\"/g" release/action.yml

      - name: Create Test Release
        id: release
        uses: ./release
        with:
          draft: true
          prerelease: true
          tag-prefix: test-

      - name: Capture Release Details
        id: release-details
        if: steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Use the release_url output from the previous step
            const releaseUrl = process.env.RELEASE_URL;
            // Extract the release ID from the URL (last segment)
            const match = releaseUrl && releaseUrl.match(/\/releases\/tag\/([^/]+)/);
            if (!match) throw new Error('Could not extract release tag from release_url');
            const tag = decodeURIComponent(match[1]);
            let release;
            for (let i = 0; i < 5; i++) {
              try {
                const { data } = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag
                });
                release = data;
                break;
              } catch (err) {
                if (err.status === 404 && i < 4) {
                  await new Promise(res => setTimeout(res, 3000)); // wait 3 seconds
                } else {
                  throw err;
                }
              }
            }
            if (!release) throw new Error('Release not found after retries');
            fs.writeFileSync('release-notes.md', release.body || '');
            const metadata = {
              name: release.name,
              tagName: release.tag_name,
              isDraft: release.draft,
              isPrerelease: release.prerelease,
              createdAt: release.created_at
            };
            fs.writeFileSync('release-metadata.json', JSON.stringify(metadata, null, 2));
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_URL: ${{ steps.release.outputs.release_url }}

      - name: Post Release Preview to PR
        if: github.event_name == 'pull_request' && steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the release notes and metadata
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            const metadata = JSON.parse(fs.readFileSync('release-metadata.json', 'utf8'));

            // Create a formatted comment
            const comment = `## üéØ Release Action Test Results

            ### Release Metadata
            - **Version**: ${metadata.tagName}
            - **Name**: ${metadata.name}
            - **Type**: ${metadata.isDraft ? 'üìù Draft' : 'üì¢ Published'} ${metadata.isPrerelease ? '(Pre-release)' : ''}
            - **Created**: ${new Date(metadata.createdAt).toLocaleString()}
            - **Bump Type**: ${{ steps.release.outputs.bump_type }}
            - **Previous Version**: ${{ steps.release.outputs.previous_version }}

            ### Release Notes Preview

            <details>
            <summary>Click to expand release notes</summary>

            ${releaseNotes}

            </details>

            ### Release URL
            üîó [View test release](${{ steps.release.outputs.release_url }})

            > **Note**: This test release will be automatically deleted after verification.`;

            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Verify Release
        run: |
          echo "‚úÖ Release created successfully"
          echo "Version: ${{ steps.release.outputs.new_version }}"
          echo "Previous: ${{ steps.release.outputs.previous_version }}"
          echo "Bump type: ${{ steps.release.outputs.bump_type }}"
          echo "URL: ${{ steps.release.outputs.release_url }}"

          if [[ -f release-notes.md ]]; then
            echo -e "\nüìù Release Notes:"
            cat release-notes.md
          fi

      - name: Delete Test Releases and Test Tags
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Cleaning up test releases and tags...');

            try {
              // List all releases in the repo
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              // Filter and delete test releases
              const testReleases = releases.filter(release => release.tag_name.startsWith('test-'));
              console.log(`Found ${testReleases.length} test releases to delete`);

              for (const release of testReleases) {
                console.log(`Deleting release: ${release.tag_name}`);
                try {
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                  console.log(`‚úÖ Successfully deleted release: ${release.tag_name}`);
                } catch (error) {
                  console.error(`‚ùå Error deleting release ${release.tag_name}:`, error);
                }
              }

              // List and delete test tags
              const { data: refs } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/test-'
              });

              console.log(`Found ${refs.length} test tags to delete`);

              for (const ref of refs) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Deleting tag: ${tagName}`);
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                  console.log(`‚úÖ Successfully deleted tag: ${tagName}`);
                } catch (error) {
                  console.error(`‚ùå Error deleting tag ${tagName}:`, error);
                }
              }

              console.log('üèÅ Test releases and tags cleanup completed');
            } catch (error) {
              console.error('‚ùå Error during cleanup:', error);
            }

      - name: Restore Original Action
        if: always()
        run: |
          # Restore the original action
          if [ -f release/action.yml.bak ]; then
            mv release/action.yml.bak release/action.yml
            echo "‚úÖ Restored original action.yml"
          fi

  test-build-scope-analyzer:
    name: Test Build Scope Analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Test Environment
        run: |
          # Create test files
          mkdir -p src/helloworld
          echo "FROM node:18" > src/helloworld/Dockerfile
          echo "WORKDIR /app" >> src/helloworld/Dockerfile
          echo "COPY . ." >> src/helloworld/Dockerfile
          echo "CMD [\"node\", \"index.js\"]" >> src/helloworld/Dockerfile

          echo "name: hello-world" > src/helloworld/app.yaml
          echo "version: 1.0.0" >> src/helloworld/app.yaml
          echo "description: Test application" >> src/helloworld/app.yaml

          # Create a test branch to compare against
          git checkout -b test-base
          git add .
          git commit -m "Initial test commit" || true

          # Make changes on a new branch
          git checkout -b test-changes
          echo "console.log('Hello World');" > src/helloworld/index.js
          mkdir -p src/another-app
          echo "FROM alpine:latest" > src/another-app/Dockerfile
          git add .

      - name: Build Docker image for Build Scope Analyzer
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA ./build-scope-analyzer

      - name: Push Docker image to GHCR
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA

      - name: Analyze Build Scope (with changes) using container
        id: scope
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --output-format json > matrix.json
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Verify Analysis Results
        run: |
          echo "Matrix: $(cat matrix.json)"
          cat matrix.json | jq .

          # Verify that the output contains comparison_ref and not ref
          if grep -q '"ref":' matrix.json; then
            echo "‚ùå ERROR: Output still contains 'ref' instead of 'comparison_ref'"
            exit 1
          fi

          if ! grep -q '"comparison_ref":' matrix.json; then
            echo "‚ùå ERROR: Output does not contain 'comparison_ref'"
            exit 1
          fi

          echo "‚úÖ Verification passed: Output uses 'comparison_ref' properly"

      - name: Test with Include Pattern using container
        id: scope-include
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --include-pattern 'src/helloworld' --output-format json > matrix-include.json
          echo "matrix=$(cat matrix-include.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Verify Include Pattern Results
        run: |
          echo "Matrix (include pattern): $(cat matrix-include.json)"
          cat matrix-include.json | jq .

          # Verify that the output contains comparison_ref and not ref
          if grep -q '"ref":' matrix-include.json; then
            echo "‚ùå ERROR: Output still contains 'ref' instead of 'comparison_ref'"
            exit 1
          fi

          if ! grep -q '"comparison_ref":' matrix-include.json; then
            echo "‚ùå ERROR: Output does not contain 'comparison_ref'"
            exit 1
          fi

          # Verify that the include pattern worked correctly
          if ! jq -e '.apps.all | length > 0' matrix-include.json > /dev/null; then
            echo "‚ùå ERROR: Include pattern didn't populate apps.all properly"
            exit 1
          fi

          echo "‚úÖ Verification passed: Output uses 'comparison_ref' and include pattern works properly"

      - name: Cleanup Test Branches
        if: always()
        run: |
          echo "üßπ Cleaning up test branches..."
          # Make sure we're not on the branch we're trying to delete
          git checkout main || git checkout master || echo "Could not checkout main/master"
          # Force delete branches even if not merged
          git branch -D test-base test-changes || echo "Could not delete test branches"

      - name: Cleanup Test Docker Images
        if: always()
        run: |
          echo "üßπ Cleaning up test Docker images..."
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker rmi ghcr.io/$ORG_REPO/build-scope-analyzer:sha-$SHORT_SHA || echo "Could not remove Docker image"

      - name: Cleanup Test Files
        if: always()
        run: |
          echo "üßπ Cleaning up test files..."
          rm -rf src/helloworld src/another-app matrix.json matrix-include.json || echo "Could not remove test files"

      - name: Cleanup Summary
        if: always()
        run: |
          echo "## Test Resources Cleanup" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Test branches: test-base, test-changes" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Test Docker images removed" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Test files removed" >> $GITHUB_STEP_SUMMARY
          echo "Completed: $(date)" >> $GITHUB_STEP_SUMMARY

  test-hello-world-docker:
    name: Test Hello World Docker Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Docker Action
        id: hello-docker
        uses: ./hello-world-docker
        with:
          who-to-greet: "Stratus Docker"

      - name: Print Docker Action Output
        run: |
          echo "Docker action time output: ${{ steps.hello-docker.outputs.time }}"

  cleanup-all-test-resources:
    name: Final Test Resource Cleanup
    if: always()
    needs: [test-hello-world, test-release, test-build-scope-analyzer, test-hello-world-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete ALL Test Releases and Tags
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Running final cleanup of ALL test releases and tags...');

            // Function to handle errors gracefully
            const safeDelete = async (operation, fn) => {
              try {
                await fn();
                return true;
              } catch (error) {
                console.error(`‚ùå Error during ${operation}:`, error.message);
                return false;
              }
            };

            // Get and delete all test releases
            try {
              // List all releases in the repo
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              // Filter test releases
              const testReleases = releases.filter(release =>
                release.tag_name.startsWith('test-') ||
                release.name.includes('Test') ||
                release.name.includes('test')
              );

              console.log(`Found ${testReleases.length} test releases to delete`);

              let deletedReleases = 0;
              for (const release of testReleases) {
                console.log(`Attempting to delete release: ${release.tag_name} (${release.name})`);
                const success = await safeDelete(`release ${release.tag_name}`, async () => {
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                });

                if (success) {
                  deletedReleases++;
                  console.log(`‚úÖ Successfully deleted release: ${release.tag_name}`);
                }
              }

              console.log(`üèÅ Deleted ${deletedReleases} out of ${testReleases.length} test releases`);
            } catch (error) {
              console.error('‚ùå Error listing releases:', error.message);
            }

            // Get and delete all test tags
            try {
              // First try with prefix match
              const { data: testTags } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/test-'
              });

              console.log(`Found ${testTags.length} test tags with 'test-' prefix`);

              let deletedTags = 0;
              for (const ref of testTags) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Attempting to delete tag: ${tagName}`);
                const success = await safeDelete(`tag ${tagName}`, async () => {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                });

                if (success) {
                  deletedTags++;
                  console.log(`‚úÖ Successfully deleted tag: ${tagName}`);
                }
              }

              // Now get all tags and filter for other potential test tags
              const { data: allRefs } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/'
              });

              const otherTestTags = allRefs.filter(ref => {
                const tagName = ref.ref.replace('refs/tags/', '');
                return tagName.includes('test') && !tagName.startsWith('test-');
              });

              console.log(`Found ${otherTestTags.length} additional test tags`);

              for (const ref of otherTestTags) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Attempting to delete additional test tag: ${tagName}`);
                const success = await safeDelete(`tag ${tagName}`, async () => {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                });

                if (success) {
                  deletedTags++;
                  console.log(`‚úÖ Successfully deleted additional test tag: ${tagName}`);
                }
              }

              console.log(`üèÅ Deleted ${deletedTags} test tags in total`);              // Add summary information for tags/releases
              core.summary
                .addHeading('Final Cleanup Results')
                .addTable([
                  [{ data: 'Resource Type', header: true }, { data: 'Found', header: true }, { data: 'Deleted', header: true }],
                  ['Test Releases', testReleases.length.toString(), deletedReleases.toString()],
                  ['Test Tags', (testTags.length + otherTestTags.length).toString(), deletedTags.toString()]
                ])
                .addLink('Workflow Run', `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);

            } catch (error) {
              console.error('‚ùå Error managing tags:', error.message);
              core.summary
                .addHeading('Cleanup Error')
                .addCodeBlock(error.message, 'js')
                .addLink('Workflow Run', `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);
            }

      - name: Delete Test GHCR Packages
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Running cleanup of test packages from GitHub Container Registry...');

            try {
              // Get the org/repo name
              const orgRepo = process.env.GITHUB_REPOSITORY.toLowerCase();
              console.log(`Looking for packages in: ${orgRepo}`);

              // Get all container packages
              const [owner, repo] = orgRepo.split('/');
              const { data: packages } = await github.rest.packages.listPackagesForOrganization({
                package_type: 'container',
                org: owner
              });

              console.log(`Found ${packages.length} total container packages in org`);

              // Find test packages (those with build-scope-analyzer that were created within the last 24 hours)
              const testPackages = packages.filter(pkg => {
                // Filter for build-scope-analyzer packages
                if (!pkg.name.includes('build-scope-analyzer')) {
                  return false;
                }

                // Check if it was created in the last 24 hours
                const createdAt = new Date(pkg.created_at);
                const oneDayAgo = new Date();
                oneDayAgo.setDate(oneDayAgo.getDate() - 1);
                return createdAt > oneDayAgo;
              });

              console.log(`Found ${testPackages.length} recent test packages to clean up`);

              // Track deletions
              let deletedPackageCount = 0;
              let deletedVersionCount = 0;

              // For each package, list and delete versions with test tags
              for (const pkg of testPackages) {
                console.log(`Processing package: ${pkg.name}`);

                try {
                  // Get all versions of this package
                  const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                    package_type: 'container',
                    package_name: pkg.name,
                    org: owner
                  });

                  console.log(`Found ${versions.length} versions of package ${pkg.name}`);

                  // Filter for test versions (sha-* tags, test-* tags, created in last 24h)
                  const testVersions = versions.filter(version => {
                    // Check if it has a test tag
                    const hasTestTag = version.metadata?.container?.tags.some(tag =>
                      tag.startsWith('sha-') || tag.startsWith('test-') || tag.includes('-test')
                    );

                    if (!hasTestTag) return false;

                    // Check if it was created in the last 24 hours
                    const createdAt = new Date(version.created_at);
                    const oneDayAgo = new Date();
                    oneDayAgo.setDate(oneDayAgo.getDate() - 1);
                    return createdAt > oneDayAgo;
                  });

                  console.log(`Found ${testVersions.length} test versions to delete for ${pkg.name}`);

                  // Delete each test version
                  for (const version of testVersions) {
                    try {
                      console.log(`Deleting package version: ${pkg.name}@${version.id} with tags: ${JSON.stringify(version.metadata?.container?.tags)}`);

                      await github.rest.packages.deletePackageVersionForOrg({
                        package_type: 'container',
                        package_name: pkg.name,
                        org: owner,
                        package_version_id: version.id
                      });

                      console.log(`‚úÖ Successfully deleted package version: ${pkg.name}@${version.id}`);
                      deletedVersionCount++;
                    } catch (error) {
                      console.error(`‚ùå Error deleting package version ${pkg.name}@${version.id}:`, error.message);
                    }
                  }

                  // If all versions were deleted, check if the package is now empty
                  const { data: remainingVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                    package_type: 'container',
                    package_name: pkg.name,
                    org: owner
                  });

                  if (remainingVersions.length === 0) {
                    try {
                      console.log(`Package ${pkg.name} has no versions left, deleting the package`);

                      await github.rest.packages.deletePackageForOrg({
                        package_type: 'container',
                        package_name: pkg.name,
                        org: owner
                      });

                      console.log(`‚úÖ Successfully deleted empty package: ${pkg.name}`);
                      deletedPackageCount++;
                    } catch (error) {
                      console.error(`‚ùå Error deleting empty package ${pkg.name}:`, error.message);
                    }
                  }
                } catch (error) {
                  console.error(`‚ùå Error processing package ${pkg.name}:`, error.message);
                }
              }

              console.log(`üèÅ Package cleanup complete. Deleted ${deletedVersionCount} package versions and ${deletedPackageCount} empty packages`);

              // Add to the summary report
              core.summary
                .addHeading('GHCR Package Cleanup')
                .addTable([
                  [{ data: 'Resource Type', header: true }, { data: 'Found', header: true }, { data: 'Deleted', header: true }],
                  ['Test Packages', testPackages.length.toString(), deletedPackageCount.toString()],
                  ['Test Package Versions', 'N/A', deletedVersionCount.toString()]
                ])
                .write();

            } catch (error) {
              console.error('‚ùå Error during GHCR package cleanup:', error.message);
              core.summary
                .addHeading('GHCR Package Cleanup Error')
                .addCodeBlock(error.message, 'js')
                .write();
            }
