name: Test Actions

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - "hello-world/**"
      - "release/**"
      - "build-scope-analyzer/**"
      - ".github/workflows/test-actions.yml"

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  test-hello-world:
    name: Test Hello World Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Action
        uses: ./hello-world

  test-release:
    name: Test Release Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Create a test scenario by modifying the release action to avoid actual push
      - name: Mock Release Action for Testing
        run: |
          # Create a backup of the original action
          cp release/action.yml release/action.yml.bak

          # Modify the action to skip the actual git push
          sed -i "s/git push origin/echo \"MOCK: Would push tag\"/g" release/action.yml

      - name: Create Test Release
        id: release
        uses: ./release
        with:
          draft: true
          prerelease: true
          tag-prefix: test-

      - name: Capture Release Details
        id: release-details
        if: steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Use the release_url output from the previous step
            const releaseUrl = process.env.RELEASE_URL;
            // Extract the release ID from the URL (last segment)
            const match = releaseUrl && releaseUrl.match(/\/releases\/tag\/([^/]+)/);
            if (!match) throw new Error('Could not extract release tag from release_url');
            const tag = decodeURIComponent(match[1]);
            let release;
            for (let i = 0; i < 5; i++) {
              try {
                const { data } = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag
                });
                release = data;
                break;
              } catch (err) {
                if (err.status === 404 && i < 4) {
                  await new Promise(res => setTimeout(res, 3000)); // wait 3 seconds
                } else {
                  throw err;
                }
              }
            }
            if (!release) throw new Error('Release not found after retries');
            fs.writeFileSync('release-notes.md', release.body || '');
            const metadata = {
              name: release.name,
              tagName: release.tag_name,
              isDraft: release.draft,
              isPrerelease: release.prerelease,
              createdAt: release.created_at
            };
            fs.writeFileSync('release-metadata.json', JSON.stringify(metadata, null, 2));
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_URL: ${{ steps.release.outputs.release_url }}

      - name: Post Release Preview to PR
        if: github.event_name == 'pull_request' && steps.release.outputs.release_url != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the release notes and metadata
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            const metadata = JSON.parse(fs.readFileSync('release-metadata.json', 'utf8'));

            // Create a formatted comment
            const comment = `## üéØ Release Action Test Results

            ### Release Metadata
            - **Version**: ${metadata.tagName}
            - **Name**: ${metadata.name}
            - **Type**: ${metadata.isDraft ? 'üìù Draft' : 'üì¢ Published'} ${metadata.isPrerelease ? '(Pre-release)' : ''}
            - **Created**: ${new Date(metadata.createdAt).toLocaleString()}
            - **Bump Type**: ${{ steps.release.outputs.bump_type }}
            - **Previous Version**: ${{ steps.release.outputs.previous_version }}

            ### Release Notes Preview

            <details>
            <summary>Click to expand release notes</summary>

            ${releaseNotes}

            </details>

            ### Release URL
            üîó [View test release](${{ steps.release.outputs.release_url }})

            > **Note**: This test release will be automatically deleted after verification.`;

            // Post the comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Verify Release
        run: |
          echo "‚úÖ Release created successfully"
          echo "Version: ${{ steps.release.outputs.new_version }}"
          echo "Previous: ${{ steps.release.outputs.previous_version }}"
          echo "Bump type: ${{ steps.release.outputs.bump_type }}"
          echo "URL: ${{ steps.release.outputs.release_url }}"

          if [[ -f release-notes.md ]]; then
            echo -e "\nüìù Release Notes:"
            cat release-notes.md
          fi

      - name: Delete Test Releases and Test Tags
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Cleaning up test releases and tags...');

            try {
              // List all releases in the repo
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              // Filter and delete test releases
              const testReleases = releases.filter(release => release.tag_name.startsWith('test-'));
              console.log(`Found ${testReleases.length} test releases to delete`);

              for (const release of testReleases) {
                console.log(`Deleting release: ${release.tag_name}`);
                try {
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                  console.log(`‚úÖ Successfully deleted release: ${release.tag_name}`);
                } catch (error) {
                  console.error(`‚ùå Error deleting release ${release.tag_name}:`, error);
                }
              }

              // List and delete test tags
              const { data: refs } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/test-'
              });

              console.log(`Found ${refs.length} test tags to delete`);

              for (const ref of refs) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Deleting tag: ${tagName}`);
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                  console.log(`‚úÖ Successfully deleted tag: ${tagName}`);
                } catch (error) {
                  console.error(`‚ùå Error deleting tag ${tagName}:`, error);
                }
              }

              console.log('üèÅ Test releases and tags cleanup completed');
            } catch (error) {
              console.error('‚ùå Error during cleanup:', error);
            }

      - name: Restore Original Action
        if: always()
        run: |
          # Restore the original action
          if [ -f release/action.yml.bak ]; then
            mv release/action.yml.bak release/action.yml
            echo "‚úÖ Restored original action.yml"
          fi

  test-build-scope-analyzer:
    name: Test Build Scope Analyzer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Setup Test Environment
        run: |
          # Create test files
          mkdir -p src/helloworld
          echo "FROM node:18" > src/helloworld/Dockerfile
          echo "WORKDIR /app" >> src/helloworld/Dockerfile
          echo "COPY . ." >> src/helloworld/Dockerfile
          echo "CMD [\"node\", \"index.js\"]" >> src/helloworld/Dockerfile

          echo "name: hello-world" > src/helloworld/app.yaml
          echo "version: 1.0.0" >> src/helloworld/app.yaml
          echo "description: Test application" >> src/helloworld/app.yaml

          # Create a test branch to compare against
          git checkout -b test-base
          git add .
          git commit -m "Initial test commit" || true

          # Make changes on a new branch
          git checkout -b test-changes
          echo "console.log('Hello World');" > src/helloworld/index.js
          mkdir -p src/another-app
          echo "FROM alpine:latest" > src/another-app/Dockerfile
          git add .

      - name: Build Docker image for Build Scope Analyzer
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker build -t ghcr.io/$ORG_REPO/build-scope-analyzer:test-sha-$SHORT_SHA ./build-scope-analyzer

      - name: Push Docker image to GHCR
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker push ghcr.io/$ORG_REPO/build-scope-analyzer:test-sha-$SHORT_SHA

      - name: Analyze Build Scope (with changes) using container
        id: scope
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:test-sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --output-format json > matrix.json
          echo "matrix=$(cat matrix.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Test with Include Pattern using container
        id: scope-include
        run: |
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker run --rm \
            -v "$(pwd):/github/workspace" \
            -e GITHUB_WORKSPACE=/github/workspace \
            ghcr.io/$ORG_REPO/build-scope-analyzer:test-sha-$SHORT_SHA \
            --root-path /github/workspace --comparison-ref test-base --include-pattern 'src/helloworld' --output-format json > matrix-include.json
          echo "matrix=$(cat matrix-include.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Verify Include Pattern Results
        run: |
          echo "Matrix (include pattern): $(cat matrix-include.json)"
          cat matrix-include.json | jq .

          # Verify that the include pattern worked correctly
          if ! jq -e '.apps.all | length > 0' matrix-include.json > /dev/null; then
            echo "‚ùå ERROR: Include pattern didn't populate apps.all properly"
            exit 1
          fi

          echo "‚úÖ Verification passed: Include pattern populated apps.all correctly"

      - name: Cleanup Test Docker Images
        if: always()
        run: |
          echo "üßπ Cleaning up test Docker images..."
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          ORG_REPO=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker rmi ghcr.io/$ORG_REPO/build-scope-analyzer:test-sha-$SHORT_SHA || echo "Could not remove Docker image"

  test-hello-world-docker:
    name: Test Hello World Docker Action
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Test Hello World Docker Action
        id: hello-docker
        uses: ./hello-world-docker
        with:
          who-to-greet: "Stratus Docker"

      - name: Print Docker Action Output
        run: |
          echo "Docker action time output: ${{ steps.hello-docker.outputs.time }}"

  cleanup-all-test-resources:
    name: Final Test Resource Cleanup
    if: always()
    needs: [test-hello-world, test-release, test-build-scope-analyzer, test-hello-world-docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete ALL Test Releases and Tags
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Running final cleanup of ALL test releases and tags...');

            // Function to handle errors gracefully
            const safeDelete = async (operation, fn) => {
              try {
                await fn();
                return true;
              } catch (error) {
                console.error(`‚ùå Error during ${operation}:`, error.message);
                return false;
              }
            };

            // Get and delete all test releases
            try {
              // List all releases in the repo
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });

              // Filter test releases
              const testReleases = releases.filter(release =>
                release.tag_name.startsWith('test-') ||
                release.name.includes('Test') ||
                release.name.includes('test')
              );

              console.log(`Found ${testReleases.length} test releases to delete`);

              let deletedReleases = 0;
              for (const release of testReleases) {
                console.log(`Attempting to delete release: ${release.tag_name} (${release.name})`);
                const success = await safeDelete(`release ${release.tag_name}`, async () => {
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                });

                if (success) {
                  deletedReleases++;
                  console.log(`‚úÖ Successfully deleted release: ${release.tag_name}`);
                }
              }

              console.log(`üèÅ Deleted ${deletedReleases} out of ${testReleases.length} test releases`);
            } catch (error) {
              console.error('‚ùå Error listing releases:', error.message);
            }

            // Get and delete all test tags
            try {
              // First try with prefix match
              const { data: testTags } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/test-'
              });

              console.log(`Found ${testTags.length} test tags with 'test-' prefix`);

              let deletedTags = 0;
              for (const ref of testTags) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Attempting to delete tag: ${tagName}`);
                const success = await safeDelete(`tag ${tagName}`, async () => {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                });

                if (success) {
                  deletedTags++;
                  console.log(`‚úÖ Successfully deleted tag: ${tagName}`);
                }
              }

              // Now get all tags and filter for other potential test tags
              const { data: allRefs } = await github.rest.git.listMatchingRefs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/'
              });

              const otherTestTags = allRefs.filter(ref => {
                const tagName = ref.ref.replace('refs/tags/', '');
                return tagName.includes('test') && !tagName.startsWith('test-');
              });

              console.log(`Found ${otherTestTags.length} additional test tags`);

              for (const ref of otherTestTags) {
                const tagName = ref.ref.replace('refs/tags/', '');
                console.log(`Attempting to delete additional test tag: ${tagName}`);
                const success = await safeDelete(`tag ${tagName}`, async () => {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${tagName}`
                  });
                });

                if (success) {
                  deletedTags++;
                  console.log(`‚úÖ Successfully deleted additional test tag: ${tagName}`);
                }
              }

              console.log(`üèÅ Deleted ${deletedTags} test tags in total`);              // Add summary information for tags/releases
              core.summary
                .addHeading('Final Cleanup Results')
                .addTable([
                  [{ data: 'Resource Type', header: true }, { data: 'Found', header: true }, { data: 'Deleted', header: true }],
                  ['Test Releases', testReleases.length.toString(), deletedReleases.toString()],
                  ['Test Tags', (testTags.length + otherTestTags.length).toString(), deletedTags.toString()]
                ])
                .addLink('Workflow Run', `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);

            } catch (error) {
              console.error('‚ùå Error managing tags:', error.message);
              core.summary
                .addHeading('Cleanup Error')
                .addCodeBlock(error.message, 'js')
                .addLink('Workflow Run', `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`);
            }

      - name: Delete Test GHCR Package Tags
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('üßπ Running cleanup of test package tags from GitHub Container Registry...');

            try {
              // Get the org/repo name
              const orgRepo = process.env.GITHUB_REPOSITORY.toLowerCase();
              const [owner, repo] = orgRepo.split('/');
              console.log(`Looking for packages in: ${orgRepo}`);

              let packages = [];
              let isOrg = false;

              // Try to determine if owner is an org or a user
              try {
                const { data: orgData } = await github.rest.orgs.get({ org: owner });
                console.log(`Owner "${owner}" is confirmed as an organization`);
                isOrg = true;
              } catch (error) {
                console.log(`Owner "${owner}" is likely a user account, not an organization`);
                isOrg = false;
              }

              // Get packages based on whether the owner is an org or user
              if (isOrg) {
                console.log(`Listing packages for organization: ${owner}`);
                const { data: orgPackages } = await github.rest.packages.listPackagesForOrganization({
                  package_type: 'container',
                  org: owner
                });
                packages = orgPackages;
              } else {
                console.log(`Listing packages for user: ${owner}`);
                const { data: userPackages } = await github.rest.packages.listPackagesForUser({
                  package_type: 'container',
                  username: owner
                });
                packages = userPackages;
              }

              console.log(`Found ${packages.length} total container packages`);

              // Make sure we find the build-scope-analyzer package by being more flexible with names
              const bsaPackages = packages.filter(pkg =>
                pkg.name.includes('build-scope-analyzer') ||
                pkg.name.includes('scope-analyzer') ||
                pkg.name === repo
              );

              console.log(`Found ${bsaPackages.length} potential build-scope-analyzer packages`);

              if (bsaPackages.length === 0) {
                // Try to get all packages for the repo directly
                try {
                  console.log(`Trying to list packages for repo: ${owner}/${repo}`);
                  const { data: repoPackages } = await github.rest.packages.listPackagesForRepository({
                    package_type: 'container',
                    owner,
                    repo
                  });
                  bsaPackages.push(...repoPackages);
                  console.log(`Found ${repoPackages.length} packages directly from repo`);
                } catch (error) {
                  console.log(`Could not list packages for repository: ${error.message}`);
                }
              }

              // Track tag deletions
              let deletedTagsCount = 0;
              let processedTags = [];

              // Function to safely delete a tag using container registry API
              const deleteTag = async (pkgName, tag) => {
                try {
                  // For GHCR, we need to use Docker Registry API to delete tags
                  // First, get a token with the right scope
                  const tokenResponse = await github.request('POST /repos/{owner}/{repo}/actions/runners/registration-token', {
                    owner,
                    repo,
                    headers: {
                      'X-GitHub-Api-Version': '2022-11-28'
                    }
                  });

                  // Use curl to call the Docker Registry API directly
                  const curlCmd = `curl -X DELETE -H "Authorization: Bearer ${process.env.GITHUB_TOKEN}" https://ghcr.io/v2/${owner}/${pkgName}/manifests/${tag}`;

                  // Use GitHub Actions core.exportVariable to export the curl command as a secret
                  // This prevents the token from being logged
                  core.exportVariable('DELETE_TAG_CMD', curlCmd);

                  // Use GitHub Actions exec to run the curl command
                  const { execSync } = require('child_process');
                  try {
                    execSync('$DELETE_TAG_CMD', { stdio: 'pipe' });
                    return true;
                  } catch (error) {
                    console.error(`Error executing curl command: ${error.message}`);
                    return false;
                  }
                } catch (error) {
                  console.error(`Error deleting tag ${tag} for package ${pkgName}: ${error.message}`);
                  return false;
                }
              };

              // For each package, list versions with test tags and remove those tags
              for (const pkg of bsaPackages) {
                console.log(`Processing package: ${pkg.name}`);

                try {
                  let versions = [];

                  // Get versions based on owner type
                  if (isOrg) {
                    const { data: orgVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                      package_type: 'container',
                      package_name: pkg.name,
                      org: owner
                    });
                    versions = orgVersions;
                  } else {
                    const { data: userVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                      package_type: 'container',
                      package_name: pkg.name,
                      username: owner
                    });
                    versions = userVersions;
                  }

                  console.log(`Found ${versions.length} versions of package ${pkg.name}`);

                  // Find versions with test tags
                  for (const version of versions) {
                    const tags = version.metadata?.container?.tags || [];
                    console.log(`Version ${version.id} has tags: ${JSON.stringify(tags)}`);

                    // Find test tags
                    const testTags = tags.filter(tag =>
                      tag.startsWith('test-sha-') ||
                      tag.startsWith('sha-') ||
                      tag.startsWith('test-') ||
                      tag.includes('-test') ||
                      tag.includes('_test')
                    );

                    if (testTags.length > 0) {
                      console.log(`Found ${testTags.length} test tags to delete for version ${version.id}: ${JSON.stringify(testTags)}`);

                      // Try to delete each tag using the container registry API
                      for (const tag of testTags) {
                        if (!processedTags.includes(`${pkg.name}:${tag}`)) {
                          console.log(`Attempting to delete tag ${tag} from package ${pkg.name}`);

                          // Create a Personal Access Token through GitHub API
                          // This token will be used for the Docker Registry API call
                          try {
                            const { execSync } = require('child_process');

                            // Use GitHub CLI to delete the tag - this is the most reliable method
                            // The token from the workflow has the necessary permissions
                            try {
                              // Format the package name correctly for the CLI
                              const fullPackageName = `${owner}/${pkg.name}`;

                              // Execute the delete command using GitHub CLI (gh)
                              // First login to GHCR
                              execSync(`echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin`);

                              // Then use Docker CLI to untag the image
                              // Use a workaround with manifest inspect and delete
                              console.log(`Running manifest inspect for tag ${tag}`);
                              const manifestCmd = `docker manifest inspect ghcr.io/${owner}/${pkg.name}:${tag}`;
                              try {
                                const manifest = execSync(manifestCmd, { stdio: 'pipe' });
                                console.log(`Found manifest for tag ${tag}`);
                              } catch (e) {
                                console.log(`No manifest found for tag ${tag}, may already be deleted: ${e.message}`);
                              }

                              // Use the GitHub REST API to delete the package version's tag
                              console.log(`Deleting tag ${tag} using GitHub REST API`);
                              if (isOrg) {
                                // For organizations, use the org endpoint
                                await github.rest.packages.deletePackageVersionForOrg({
                                  package_type: 'container',
                                  package_name: pkg.name,
                                  org: owner,
                                  package_version_id: version.id
                                });
                              } else {
                                // For users, use the user endpoint
                                await github.rest.packages.deletePackageVersionForUser({
                                  package_type: 'container',
                                  package_name: pkg.name,
                                  username: owner,
                                  package_version_id: version.id
                                });
                              }

                              console.log(`‚úÖ Successfully deleted tag ${tag} from package ${pkg.name}`);
                              deletedTagsCount++;
                              processedTags.push(`${pkg.name}:${tag}`);
                            } catch (error) {
                              console.error(`‚ùå Error executing GitHub API command: ${error.message}`);
                            }
                          } catch (error) {
                            console.error(`‚ùå Error getting token for tag deletion: ${error.message}`);
                          }
                        }
                      }
                    }
                  }
                } catch (error) {
                  console.error(`‚ùå Error processing package ${pkg.name}: ${error.message}`);
                }
              }              // Try one more approach - search directly for the package in the current run
              try {
                const SHORT_SHA = process.env.GITHUB_SHA ? process.env.GITHUB_SHA.substring(0, 7) : '';
                if (SHORT_SHA) {
                  console.log(`Looking for specific package with SHA tag: test-sha-${SHORT_SHA}`);

                  // Look through all package versions again to find this specific tag
                  for (const pkg of bsaPackages) {
                    console.log(`Checking package ${pkg.name} for tag test-sha-${SHORT_SHA}`);

                    try {
                      let versions = [];

                      // Get versions based on owner type
                      if (isOrg) {
                        const { data: orgVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                          package_type: 'container',
                          package_name: pkg.name,
                          org: owner
                        });
                        versions = orgVersions;
                      } else {
                        const { data: userVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                          package_type: 'container',
                          package_name: pkg.name,
                          username: owner
                        });
                        versions = userVersions;
                      }                      // Look for the version with this specific tag
                      for (const version of versions) {
                        const tags = version.metadata?.container?.tags || [];
                        if (tags.includes(`test-sha-${SHORT_SHA}`)) {
                          console.log(`Found version with tag test-sha-${SHORT_SHA}`);

                          // Delete this specific tag
                          try {
                            // Use the GitHub REST API to delete the package version
                            if (isOrg) {
                              await github.rest.packages.deletePackageVersionForOrg({
                                package_type: 'container',
                                package_name: pkg.name,
                                org: owner,
                                package_version_id: version.id
                              });
                            } else {
                              await github.rest.packages.deletePackageVersionForUser({
                                package_type: 'container',
                                package_name: pkg.name,
                                username: owner,
                                package_version_id: version.id
                              });
                            }

                            console.log(`‚úÖ Successfully deleted version with tag test-sha-${SHORT_SHA}`);
                            deletedTagsCount++;
                            processedTags.push(`${pkg.name}:test-sha-${SHORT_SHA}`);
                          } catch (error) {
                            console.error(`‚ùå Error deleting version with tag sha-${SHORT_SHA}: ${error.message}`);
                          }
                        }
                      }
                    } catch (error) {
                      console.error(`‚ùå Error checking package ${pkg.name} for tag sha-${SHORT_SHA}: ${error.message}`);
                    }
                  }
                }
              } catch (error) {
                console.error(`‚ùå Error processing specific SHA tag: ${error.message}`);
              }

              console.log(`üèÅ Package tag cleanup complete. Deleted ${deletedTagsCount} test tags from packages`);

              // Add to the summary report
              core.summary
                .addHeading('GHCR Package Tag Cleanup')
                .addTable([
                  [{ data: 'Resource Type', header: true }, { data: 'Found', header: true }, { data: 'Deleted', header: true }],
                  ['Test Packages', bsaPackages.length.toString(), bsaPackages.length.toString()],
                  ['Test Package Tags', 'N/A', deletedTagsCount.toString()]
                ])
                .write();

            } catch (error) {
              console.error('‚ùå Error during GHCR package tag cleanup:', error.message);
              core.summary
                .addHeading('GHCR Package Tag Cleanup Error')
                .addCodeBlock(error.message, 'js')
                .write();
            }
